function [BinWinSec, BinTrcksSpd, BinTrcksSpdWght, BinTrcksEcc, BinTrcksEccWght, bintrcknum, t] = spdalsV5_MSv103_woPir(sParam, Tracks, BinWin, SampleRate)%-- this function does not return unbinned data for the purpose of better%-- memory performance%-- it uses the reshape function for databinning%-- generates data arrays of reversal and omega and speed data from Worm Analyzer%-- 'Analyze All Tracks' function. %-- Reads Tracks structure and returns data arrays with each row corresponding to one track and each column to one frame or bin%-- NaN if no track at given frame, RingDistance <=RingLimit or tracklenght%-- <= BinWin%-- BinWin: Number of frames for each bin%-- 0 if no event, 1/>1 number of reversal initiation events in fram/bin,%(c) Manuel Zimmer, manuel.zimmer@imp.ac.at% Revised by Michael Sonntagdisp(strcat('... running ', 32, mfilename, 32, ', calculating speed matrices'));%-- Process Pirouettes Data%-- -----------------------Len = max([Tracks.Frames]);BinNum = floor(Len / BinWin);%-- Bin window in secondsBinWinSec = BinWin / SampleRate;     %-- time(seconds)t = (BinWinSec / 2 : BinWinSec : BinWinSec * BinNum - (BinWinSec / 2));bintrcknum = zeros(1, BinNum);BinTrcksSpd = NaN(length(Tracks), BinNum, 'single');BinTrcksSpdWght = NaN(length(Tracks), BinNum, 'single');BinTrcksEcc = NaN(length(Tracks), BinNum, 'single');BinTrcksEccWght = NaN(length(Tracks), BinNum, 'single');for i = 1:length(Tracks)    if Tracks(i).Analyzed && Tracks(i).NumFrames >= BinWin        trcksSpd = NaN(1, Len, 'single');        trcksSpdWght = NaN(1, Len, 'single');                trcksEcc = NaN(1, Len, 'single');        trcksEccWght = NaN(1, Len, 'single');        trcksSpd(Tracks(i).Frames) = Tracks(i).Speed;        trcksSpdWght(Tracks(i).Frames) = Tracks(i).Speed;        trcksEcc(Tracks(i).Frames) = Tracks(i).Eccentricity;        trcksEccWght(Tracks(i).Frames) = Tracks(i).Eccentricity;%         %-- set speed to NaN if in Pirouette mode%         if ~isempty(Tracks(i).Pirouettes);% %             [numpiro, ~] = size(Tracks(i).Pirouettes);% %             for cnt = 1 : numpiro;% %                 strfr = Tracks(i).Frames(Tracks(i).Pirouettes(cnt,1));%                 ndfr = Tracks(i).Frames(Tracks(i).Pirouettes(cnt,2));%                 %                 trcksSpdWght(strfr:ndfr) = NaN;%                 trcksEccWght(strfr:ndfr) = NaN;%                 %             end;%         end;        %-- remove Reversals and speed data while animals are close to copper ring        RingD = find(Tracks(i).RingDistance <= sParam.spdalsRingLimit & Tracks(i).RingDistance >0);        RingD = [RingD RingD-1 RingD-2 RingD-3];        RingD = RingD(RingD > 0);                trcksSpd(Tracks(i).Frames(RingD)) = NaN;        trcksSpdWght(Tracks(i).Frames(RingD)) = NaN;        trcksEcc(Tracks(i).Frames(RingD)) = NaN;        trcksEccWght(Tracks(i).Frames(RingD)) = NaN;        %%        %        for bns = 1 : BinNum %-- bin data%             if (Tracks(i).Frames(1) <= (bns*BinWin-BinWin+1)) && (Tracks(i).Frames(end) >= (bns*BinWin)) %-- bin data only from tracks that are complete over entire bin%             %if ~(max(Tracks(i).Frames) < (bns*BinWin-BinWin+1) || min(Tracks(i).Frames) > (bns*BinWin)) %-- only if track is active in frame        if BinWin == 1            BinTrcksSpd(i,:) = trcksSpd;            BinTrcksSpdWght(i,:) = trcksSpdWght;            BinTrcksEcc(i,:) = trcksEcc;            BinTrcksEccWght(i,:) = trcksEccWght;        else            BinTrcksSpd(i,:) = mean(reshape(trcksSpd(1 : BinNum * BinWin), BinWin, BinNum));            BinTrcksSpdWght(i,:) = mean(reshape(trcksSpdWght(1 : BinNum * BinWin), BinWin, BinNum));            BinTrcksEcc(i,:) = mean(reshape(trcksEcc(1 : BinNum * BinWin), BinWin, BinNum));            BinTrcksEccWght(i,:) = mean(reshape(trcksEccWght(1 : BinNum * BinWin), BinWin, BinNum));        end    endendbintrcknum = sum(isfinite(BinTrcksSpd));